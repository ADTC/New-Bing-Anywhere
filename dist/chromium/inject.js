"use strict";
(() => {
  // package.json
  var version = "2.1.0";

  // src/universe/constants.ts
  var MAIN_VERSION = "113";
  var FULL_VERSION = "113.0.1774.57";

  // src/universe/utils.ts
  var checkIsSimpleChinese = () => {
    try {
      const lang = chrome.i18n.getUILanguage().toLowerCase();
      return lang === "zh-cn";
    } catch {
      return false;
    }
  };
  var checkIsChinese = () => {
    try {
      const lang = chrome.i18n.getUILanguage().toLowerCase();
      return lang === "zh-cn" || lang === "zh-tw" || lang === "zh-hk" || lang === "zh";
    } catch {
      return false;
    }
  };
  var localCache = (() => {
    const v = "v1";
    return {
      get: async (key) => {
        key = `${v}:${key}`;
        const { data, maxAge, lastModified } = (await chrome.storage.local.get(key))?.[key] ?? {};
        if (Date.now() - lastModified > maxAge * 1e3) {
          chrome.storage.local.remove(key);
          return null;
        }
        return data;
      },
      set: async (key, data, maxAge = Infinity) => {
        key = `${v}:${key}`;
        await chrome.storage.local.set({
          [key]: {
            data,
            lastModified: Date.now(),
            maxAge
          }
        });
      }
    };
  })();
  var userAgent = navigator.userAgent;
  var userAgentData = navigator.userAgentData;
  var isMac = userAgent.includes("Macintosh");
  var isFirefox = userAgent.includes("Firefox");
  var isEdge = userAgent.includes("Edg/");
  var isBrave = userAgentData?.brands.findIndex((item) => item.brand === "Brave") > -1;
  var isChinese = checkIsChinese();
  var isSimpleChinese = checkIsSimpleChinese();
  var isCanary = !!globalThis.__NBA_isCanary;
  var version2 = isCanary ? `0.${version}` : version;
  var genUA = () => {
    let ua = userAgent;
    if (!isEdge) {
      if (isMac) {
        ua = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${MAIN_VERSION}.0.0.0 Safari/537.36 Edg/${FULL_VERSION}`;
      } else {
        ua = `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${MAIN_VERSION}.0.0.0 Safari/537.36 Edg/${FULL_VERSION}`;
      }
    }
    return ua;
  };

  // src/inject/index.ts
  try {
    const ua = genUA();
    Object.defineProperty(navigator, "userAgent", {
      get: () => ua
    });
    const userAgentData2 = navigator.userAgentData;
    const brands = userAgentData2?.brands;
    if (Array.isArray(brands)) {
      Object.defineProperty(navigator, "userAgentData", {
        get: () => {
          const deepClonedUserAgentData = JSON.parse(JSON.stringify(userAgentData2));
          return {
            ...deepClonedUserAgentData,
            brands: [
              {
                brand: "Microsoft Edge",
                version: MAIN_VERSION
              },
              {
                brand: "Chromium",
                version: MAIN_VERSION
              },
              {
                brand: "Not-A.Brand",
                version: "24"
              }
            ]
          };
        }
      });
    }
  } catch {
  }
})();
//# sourceMappingURL=data:application/json;base64,
