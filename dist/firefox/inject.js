"use strict";
(() => {
  // src/universe/constants.ts
  var MAIN_VERSION = "114";
  var FULL_VERSION = "114.0.1823.82";

  // package.json
  var version = "2.3.0";

  // src/universe/utils/_misc.ts
  var userAgent = navigator.userAgent;
  var userAgentData = navigator.userAgentData;
  var isMac = /* @__PURE__ */ userAgent.includes("Macintosh");
  var isEdge = /* @__PURE__ */ userAgent.includes("Edg/");
  var isBrave = /* @__PURE__ */ userAgentData?.brands.findIndex((item) => item.brand === "Brave") > -1;
  var isCanary = !!globalThis.__NBA_isCanary;
  var version2 = isCanary ? `0.${version}` : version;
  var genUA = () => {
    let ua = userAgent;
    if (!isEdge) {
      if (isMac) {
        ua = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${MAIN_VERSION}.0.0.0 Safari/537.36 Edg/${FULL_VERSION}`;
      } else {
        ua = `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${MAIN_VERSION}.0.0.0 Safari/537.36 Edg/${FULL_VERSION}`;
      }
    }
    return ua;
  };

  // src/inject/index.ts
  try {
    const ua = genUA();
    Object.defineProperty(navigator, "userAgent", {
      get: () => ua
    });
    const userAgentData2 = navigator.userAgentData;
    const brands = userAgentData2?.brands;
    if (Array.isArray(brands)) {
      Object.defineProperty(navigator, "userAgentData", {
        get: () => {
          const deepClonedUserAgentData = JSON.parse(JSON.stringify(userAgentData2));
          return {
            ...deepClonedUserAgentData,
            brands: [
              {
                brand: "Not.A/Brand",
                version: "8"
              },
              {
                brand: "Chromium",
                version: MAIN_VERSION
              },
              {
                brand: "Microsoft Edge",
                version: MAIN_VERSION
              }
            ]
          };
        }
      });
    }
    if (location.pathname === "/search") {
      let count = 0;
      const MAX_TRY = 200;
      const loopCheck = () => {
        if (count > MAX_TRY)
          return;
        ++count;
        const win = window;
        const config = win._w?._sydConvConfig;
        if (config) {
          const extSets = ",iycapbing,iyxapbing";
          if (!(config.sydOptionSets ?? "").includes(extSets)) {
            config.sydOptionSets += extSets;
            config.enableVisualSearch = true;
          } else {
            requestIdleCallback(loopCheck);
          }
        } else {
          requestIdleCallback(loopCheck);
        }
      };
      loopCheck();
    }
  } catch (e) {
    console.error(e);
  }
})();
//# sourceMappingURL=data:application/json;base64,
